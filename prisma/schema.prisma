generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Recommendation {
  recno           Int      @id @map("recno")
  day             Int?     @map("DAY")
  bundle_price    Decimal  @db.Decimal(10, 2)
  data_volume     Int
  data_validity   Int
  data_price      Decimal  @db.Decimal(10, 2)
  onnet_min       Int
  onnet_validity  Int
  onnet_price     Decimal  @db.Decimal(10, 2)
  local_min       Int
  local_validity  Int      @map("local_valiidity")
  local_price     Decimal  @db.Decimal(10, 2)
  sms             Int
  sms_validity    Int
  sms_price       Decimal  @db.Decimal(10, 2)
  package_name    String   @db.VarChar(255)
  package_Verbage String?  @db.Text
  Short_Desc      String   @db.VarChar(255)
  Ribbon_text     String?  @db.VarChar(255)
  Giftpack        String   @db.VarChar(255)
  mageypackid     String   @db.VarChar(255)

  logs            RecommendationLog[] @relation("RecommendationToLogs") // Connects to logs table

  @@map(env("RECOMMENDATION_TABLE_NAME")) // Maps this model to the recommendation table in the DB
}

model User {
  user_id        Int       @id @default(autoincrement())
  username       String    @unique @db.VarChar(100)
  password_hash  String    @db.VarChar(255)
  email          String?   @unique @db.VarChar(150)
  role           String    @default("user") @db.Enum(["admin", "user"])
  created_at     DateTime  @default(now())

  sessions       Session[] @relation("UserToSessions") // Connects to session table
  logs           RecommendationLog[] @relation("UserToLogs") // Connects to logs table

  @@map(env("USER_TABLE_NAME")) // Maps this model to the users table in the DB
}

model Session {
  session_id     Int       @id @default(autoincrement())
  user_id        Int
  session_token  String    @unique @db.VarChar(128)
  ip_address     String?   @db.VarChar(45) // Supports IPv4 and IPv6
  user_agent     String?   @db.VarChar(255)
  expiration_time DateTime
  created_at     DateTime  @default(now())

  user           User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade) // Foreign key reference to User

  @@map(env("SESSION_TABLE_NAME")) // Maps this model to the sessions table in the DB
}

model RecommendationLog {
  log_id         Int       @id @default(autoincrement())
  user_id        Int
  recno          Int
  action         String    @db.Enum(["CREATE", "EDIT", "DELETE"])
  old_value      String?   @db.Text
  new_value      String?   @db.Text
  timestamp      DateTime  @default(now())

  user           User      @relation(fields: [user_id], references: [user_id]) // Foreign key reference to User
  recommendation Recommendation @relation(fields: [recno], references: [recno]) // Foreign key reference to Recommendation

  @@map(env("RECOMMENDATION_LOG_TABLE_NAME")) // Maps this model to the recommendation_logs table in the DB
}
